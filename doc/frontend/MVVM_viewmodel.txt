1)）Riverpod
Riverpod 是一个 Flutter 的状态管理库，它是 Provider 库的进化版，提供了更强大的功能、类型安全性和灵活性。Riverpod 可以帮助你在 Flutter 应用中管理和共享状态，使得状态的处理变得更加清晰、简洁且易于测试。
->
自动更新 UI：当状态变化时，Riverpod 会自动通知 UI 进行更新。
类型安全：提供者的类型在编译时就能进行检查，避免了类型错误。
全局状态管理：通过 Provider 管理状态，可以在应用中的任何位置访问这些状态。
->
Provider：Riverpod 的核心概念，用来提供一些数据或状态
Consumer：用来监听和使用提供的状态。
StateNotifier：用来管理和修改状态，适用于状态较为复杂的场景。


2）ConsumerStatefulWidget <-> Riverpod
ConsumerStatefulWidget 是 Riverpod 状态管理库提供的一个特殊小部件，它继承自 StatefulWidget，但在状态管理上有所不同。ConsumerStatefulWidget 使得你能够在小部件内部使用 Riverpod 提供的状态管理功能，并可以监听和更新来自 Riverpod 的状态。
->
功能：ConsumerStatefulWidget 允许你在 State 类中访问和使用 Riverpod 的状态管理功能，通过 ref 来监听和修改 Riverpod 提供的状态。
与 Riverpod 的集成：ConsumerStatefulWidget 可以让你在状态类（State）中轻松使用 Riverpod 提供的状态管理，而不需要手动传递状态或使用 setState()。
->
ConsumerStatefulWidget 继承自 ConsumerState，并在 State 类中通过 ref.watch() 来监听和获取来自 Riverpod 的状态。
ref.read(counterProvider.notifier).state++ 允许修改状态，而无需使用 setState()。

特性 | StatefulWidget | ConsumerStatefulWidget (与 Riverpod 配合)
状态管理 | 使用 State 和 setState() 来管理和更新状态 | 使用 Riverpod 提供的状态和 ref.watch() 监听状态
状态来源 | 状态通常保存在 State 类内部 | 状态通过 Riverpod 提供，使用 ref 来监听
适用场景 | 适用于简单的本地状态管理 | 适用于需要与 Riverpod 共享和管理的状态
自动更新 UI | 通过 setState() 手动更新 UI | Riverpod 自动处理状态变化并更新 UI
复杂性 | 比较适合本地小范围的状态管理 | 适合更复杂、跨多个组件的状态管理


3）StatefulWidget <-> State(createstate)
->
StatefulWidget（在你例子里是 SignupPage）
就像是一个「壳」或者「配置数据」的载体。
它本身是不可变的（immutable）。
它的职责是创建它所对应的「状态对象」（State）。
->
State（在你例子里是 _SignupPageState）
这是真正有状态、有生命周期、有 UI 构建逻辑的类。
负责构建 UI（build() 方法），响应状态变化（setState()）等。
状态是可以变化的（mutable）
->
你看到的页面 UI 
   ↑
 build()
   ↑
_SignupPageState（继承自 ConsumerState<SignupPage>）
   ↑
 createState()
   ↑
SignupPage（继承自 ConsumerStatefulWidget）
特别的 ConsumerStatefulWidget / ConsumerState 只是使能在状态中用 Riverpod 的 ref.watch() 等功能

4）@override void dispose()
createState() ➜ initState() ➜ build() ➜ dispose()
